// This source file has been modified by Huawei Technologies Co., Ltd.
// Copyright (c) 2017 Huawei Technologies Co., Ltd. All Rights Reserved.
//
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package proto;


service ProvisionDock {
    // Create a volume
    rpc CreateVolume (CreateVolumeOpts) returns (GenericResponse){}
    
    // Delete a volume
    rpc DeleteVolume (DeleteVolumeOpts) returns (GenericResponse){}
    
    // Extend a volume
    rpc ExtendVolume (ExtendVolumeOpts) returns (GenericResponse){}
    
    // Create a volume snapshot
    rpc CreateVolumeSnapshot (CreateVolumeSnapshotOpts) 
      returns (GenericResponse){}
    
    // Delete a volume snapshot
    rpc DeleteVolumeSnapshot (DeleteVolumeSnapshotOpts) 
      returns (GenericResponse){}
    
    // Create a volume attachment
    rpc CreateAttachment (CreateAttachmentOpts) returns (GenericResponse){}
    
    // Delete a volume attachment
    rpc DeleteAttachment (DeleteAttachmentOpts) returns (GenericResponse){}
    // Create a replication
    rpc CreateReplication (CreateReplicationOpts) returns (GenericResponse){}

    // Delete a replication
    rpc DeleteReplication (DeleteReplicationOpts) returns (GenericResponse){}

    // Enable a replication
    rpc EnableReplication (EnableReplicationOpts) returns (GenericResponse){}

    // Disable a replication
    rpc DisableReplication (DisableReplicationOpts) returns (GenericResponse){}

    // Failover a replication
    rpc FailoverReplication (FailoverReplicationOpts) returns (GenericResponse){}
    // Create a volume group
    rpc CreateVolumeGroup (CreateVolumeGroupOpts) returns (GenericResponse){}
	
    // Update volume group
    rpc UpdateVolumeGroup (UpdateVolumeGroupOpts) returns (GenericResponse){}
	
    // Delete volume group
    rpc DeleteVolumeGroup (DeleteVolumeGroupOpts) returns (GenericResponse){}}

// CreateVolumeOpts is a structure which indicates all required properties
// for creating a volume.
message CreateVolumeOpts {
    // The uuid of the volume, optional when creating.
    string id = 1;
    // The name of the volume, required.
    string name = 2;
    // The requested capacity of the volume, required.
    int64 size = 3;
    // The description of the volume, optional.
    string description = 4;
    // When create volume from snapshot, this field is required.
    string snapshotId = 5;
    // The locality that volume belongs to, required.
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;    
    // The metadata of the volume, optional.
    map<string, string> metadata = 10;
    // The storage driver type.
    string driverName = 11;
    // The Context
    string context = 12;
    // The replication driver data
    map<string, string> replicationDriverData = 13;
    // The uuid of replication
    string replicationId = 14;
    // The size of snapshot
    int64 snapshotSize = 15;
    // Down load snapshot from cloud
    bool snapshotFromCloud = 16;
}

// DeleteVolumeOpts is a structure which indicates all required properties
// for deleting a volume.
message DeleteVolumeOpts {
    // The uuid of the volume, required.
    string id = 1;
    // The metadata of the volume, optional.
    map<string, string> metadata = 2;
    // The storage driver type.
    string driverName = 3;
    // The Context
    string context = 4;
}

// ExtendVolumeOpts is a structure which indicates all required properties
// for Extending a volume.
message ExtendVolumeOpts {
    // The uuid of the volume, optional when creating.
    string id = 1;
    // The name of the volume, required.
    string name = 2;
    // The requested capacity of the volume, required.
    int64 size = 3;
    // The description of the volume, optional.
    string description = 4;
    // When create volume from snapshot, this field is required.
    string snapshotId = 5;
    // The locality that volume belongs to, required.
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;    
    // The metadata of the volume, optional.
    map<string, string> metadata = 10;
    // The storage driver type.
    string driverName = 11;
    // The Context
    string context = 12;
}

// CreateVolumeSnapshotOpts is a structure which indicates all required
// properties for creating a volume snapshot.
message CreateVolumeSnapshotOpts {
    // The uuid of the volume snapshot, optional.
    string id = 1;
    // The name of the volume snapshot, required.
    string name = 2;
    // The size of the volume that snapshot belongs to, required.
    int64 size = 3;
    // The description of the volume snapshot, optional.
    string description = 4;
    // The uuid of the volume that snapshot belongs to, required.
    string volumeId = 5;
    // The metadata of the volume snapshot, optional.
    map<string, string> metadata = 6;
    // The storage driver type.
    string driverName = 7;
    // The Context
    string context = 8;
}

// DeleteVolumeSnapshotOpts is a structure which indicates all required
// properties for deleting a volume snapshot.
message DeleteVolumeSnapshotOpts {
    // The uuid of the volume snapshot, required.
    string id = 1;
    // The uuid of the volume that snapshot belongs to, required.
    string volumeId = 2;
    // The metadata of the volume snapshot, optional.
    map<string, string> metadata = 3;
    // The storage driver type.
    string driverName = 4;
    // The Context
    string context = 5;
}

// CreateAttachmentOpts is a structure which indicates all required
// properties for creating a volume attachment.
message CreateAttachmentOpts {
    // The uuid of the volume attachment, optional.
    string id = 1;
    // The uuid of the volume, required.
    string volumeId = 2;
    // This field indicates if the volume is attached locally, optional.
    bool doLocalAttach = 3;
    // This field indicates if the volume is attached multiple times, optional.
    bool multiPath = 4;
    // The infomation of the host node on which the volume will be attached.
    HostInfo hostInfo = 5;
    // The metadata of the volume attachment, optional.
    map<string, string> metadata = 6;
    // The storage driver type.
    string driverName = 7;
    // The Context
    string context = 8;
    // The protocol
    string AccessProtocol = 9;
}

// DeleteAttachmentOpts is a structure which indicates all required
// properties for deleting a volume attachment.
message DeleteAttachmentOpts {
    // The uuid of the volume attachment, optional.
    string id = 1;
    // The uuid of the volume, required.
    string volumeId = 2;
    // The infomation of the host node on which the volume will be attached.
    HostInfo hostInfo = 3;
    // The metadata of the volume attachment, optional.
    map<string, string> metadata = 4;
    // The storage driver type.
    string driverName = 5;
    // The Context
    string context = 6;
    // The protocol
    string AccessProtocol = 7;
}

// CreateSnapshotAttachmentOpts is a structure which indicates all required
// properties for creating a snapshot attachment.
message CreateSnapshotAttachmentOpts {
    // The uuid of the snapshot attachment, optional.
    string id = 1;
    // The uuid of the snapshot, required.
    string snapshotId = 2;
    // This field indicates if the snapshot is attached locally, optional.
    bool doLocalAttach = 3;
    // This field indicates if the snapshot is attached multiple times, optional.
    bool multiPath = 4;
    // The infomation of the host node on which the snapshot will be attached.
    HostInfo hostInfo = 5;
    // The metadata of the snapshot attachment, optional.
    map<string, string> metadata = 6;
    // The storage driver type.
    string driverName = 7;
    // The Context
    string context = 8;
    // The protocol
    string AccessProtocol = 9;
}

// DeleteSnapshotAttachmentOpts is a structure which indicates all required
// properties for deleting a snapshot attachment.
message DeleteSnapshotAttachmentOpts {
    // The uuid of the snapshot attachment, optional.
    string id = 1;
    // The uuid of the snapshot, required.
    string snapshotId = 2;
    // The infomation of the host node on which the volume will be attached.
    HostInfo hostInfo = 3;
    // The metadata of the snapshot attachment, optional.
    map<string, string> metadata = 4;
    // The storage driver type.
    string driverName = 5;
    // The Context
    string context = 6;
    // The protocol
    string AccessProtocol = 7;
}

message HostInfo {
    // The platform of the host, such as "x86_64"
    string platform = 1;
    // The type of OS, such as "linux","windows", etc.
    string osType = 2;
    // The name of the host
     string host = 3;
    // The ip address of the host
    string ip = 4;
    // The initiator infomation, such as: "iqn.2017.com.redhat:e08039b48d5c"
    string initiator = 5;
}

message VolumeData {
    map<string, string> data = 1;
}

// CreateReplicationOpts is a structure which indicates all required properties
// for creating a replication.
// NOTE: Need to figure out how to handle more than 2 sites.
message CreateReplicationOpts {
    // The uuid of the replication, optional when creating.
    string id = 1;
    // The name of the replication, optional.
    string name = 2;
    // The description of the replication, optional.
    string description = 3;
    // The uuid of the primary volume. This field is required.
    string primaryVolumeId = 4;
    // The uuid of the secondary volume. This field is required.
    string secondaryVolumeId = 5;
    // The dock infomation on which the request will be executed
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;
    // The metadata of the primary replication, optional.
    map<string, string> primaryReplicationDriverData = 11;
    // The metadata of the seondary replication, optional.
    map<string, string> secondaryReplicationDriverData = 12;
    // The dock id.
    string dockId = 13;
    // The replication driver type.
    string driverName = 14;
    // The Context
    string context = 15;
    // Whether is primary replication
    bool  isPrimary = 16;
    // The replication metadata
    map<string, string> metadata = 17;
    // The volume data list
    repeated  VolumeData volumeDataList = 18;
    //the replication mode sync/async
    string replicationMode = 19;
    // 0 means sync replication.
    int64 ReplicationPeriod = 20;
    // replication bandwidth
    int64 ReplicationBandwidth = 21;
}

// Delete ReplicationOpts is a structure which indicates all required properties
// for deleting a replication.
// NOTE: Need to figure out how to handle more than 2 sites.
message DeleteReplicationOpts {
    // The uuid of the replication, optional when creating.
    string id = 1;
    // The name of the replication, optional.
    string name = 2;
    // The description of the replication, optional.
    string description = 3;
    // The uuid of the primary volume. This field is required.
    string primaryVolumeId = 4;
    // The uuid of the secondary volume. This field is required.
    string secondaryVolumeId = 5;
    // The dock infomation on which the request will be executed
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;
    // The metadata of the primary replication, optional.
    map<string, string> primaryReplicationDriverData = 11;
    // The metadata of the seondary replication, optional.
    map<string, string> secondaryReplicationDriverData = 12;
    // The dock id.
    string dockId = 13;
    // The replication driver type.
    string driverName = 14;
    // The Context
    string context = 15;
    // The replication metadata
    map<string, string> metadata = 16;
    // Whether is primary replication
    bool  isPrimary = 17;
}


// Delete ReplicationOpts is a structure which indicates all required properties
message EnableReplicationOpts {
    // The uuid of the replication, optional when creating.
    string id = 1;
    // The name of the replication, optional.
    string name = 2;
    // The description of the replication, optional.
    string description = 3;
    // The uuid of the primary volume. This field is required.
    string primaryVolumeId = 4;
    // The uuid of the secondary volume. This field is required.
    string secondaryVolumeId = 5;
    // The dock infomation on which the request will be executed
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;
    // The metadata of the primary replication, optional.
    map<string, string> primaryReplicationDriverData = 11;
    // The metadata of the seondary replication, optional.
    map<string, string> secondaryReplicationDriverData = 12;
    // The dock id.
    string dockId = 13;
    // The replication driver type.
    string driverName = 14;
    // The Context
    string context = 15;
    // The replication metadata
    map<string, string> metadata = 16;
    // Whether is primary replication
    bool  isPrimary = 17;
}

// Delete ReplicationOpts is a structure which indicates all required properties
message DisableReplicationOpts {
    // The uuid of the replication, optional when creating.
    string id = 1;
    // The name of the replication, optional.
    string name = 2;
    // The description of the replication, optional.
    string description = 3;
    // The uuid of the primary volume. This field is required.
    string primaryVolumeId = 4;
    // The uuid of the secondary volume. This field is required.
    string secondaryVolumeId = 5;
    // The dock infomation on which the request will be executed
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;
    // The metadata of the primary replication, optional.
    map<string, string> primaryReplicationDriverData = 11;
    // The metadata of the seondary replication, optional.
    map<string, string> secondaryReplicationDriverData = 12;
    // The dock id.
    string dockId = 13;
    // The replication driver type.
    string driverName = 14;
    // The Context
    string context = 15;
    // The replication metadata
    map<string, string> metadata = 16;
    // Whether is primary replication
    bool  isPrimary = 17;
}

// Delete ReplicationOpts is a structure which indicates all required properties
message FailoverReplicationOpts {
    // The uuid of the replication, optional when creating.
    string id = 1;
    // The name of the replication, optional.
    string name = 2;
    // The description of the replication, optional.
    string description = 3;
    // The uuid of the primary volume. This field is required.
    string primaryVolumeId = 4;
    // The uuid of the secondary volume. This field is required.
    string secondaryVolumeId = 5;
    // The dock infomation on which the request will be executed
    string availabilityZone = 6;
    // The service level that volume belongs to, required.
    string profileId = 7;
    // The uuid of the pool on which volume will be created, required.
    string poolId = 8;
    // The name of the pool on which volume will be created, required.
    string poolName = 9;
    // The metadata of the primary replication, optional.
    map<string, string> primaryReplicationDriverData = 11;
    // The metadata of the seondary replication, optional.
    map<string, string> secondaryReplicationDriverData = 12;
    // The dock id.
    string dockId = 13;
    // The replication driver type.
    string driverName = 14;
    // The Context
    string context = 15;
    // Allow attached volume
    bool allowAttachedVolume = 16;
    // The secondary backend id.
    string secondaryBackendId = 17;
    // The replication metadata
    map<string, string> metadata = 18;
    // Whether is primary replication
    bool  isPrimary = 19;
}

// CreateVolumeGroupOpts is a structure which indicates all required
// properties for creating a volume group.
message CreateVolumeGroupOpts {
    // The uuid of the volume group, optional when creating.
    string id = 1;
    // The name of the volume, required.
    string name = 2;
    // The driver of the volume group.
    string driverName = 3;
    // The description of the volume, optional.
    string description = 4;
    // When create volume from snapshot, this field is required.
    string availabilityZone = 5;
    // The addVolumes contain UUIDs of volumes to be added to the group.
    repeated string addVolumes = 6;
    // The removeVolumes contains the volumes to be removed from the group.
    repeated string removeVolumes = 7;
    // The pool belongs to the group.
    string poolId =8;
    // The Context
    string context = 9;
}

message UpdateVolumeGroupOpts{
    // The uuid of the volume group, optional when updating.
    string id = 1;
    // The driver of the volume group.
    string driverName = 2;
    // The addVolumes contain UUIDs of volumes to be added to the group.
    repeated string addVolumes = 3;
    // The removeVolumes contains the volumes to be removed from the group.
    repeated string removeVolumes = 4;
    // The Context
    string context = 5;
}

message DeleteVolumeGroupOpts{
    // The uuid of the volume group, optional when deleting.
    string id = 1;
    // The driver of the volume group.
    string driverName = 2;
    // The Context
    string context = 3;
}
service AttachDock {
    // Attach a volume
    rpc AttachVolume (AttachVolumeOpts) returns (GenericResponse){}
    
    // Detach a volume
    rpc DetachVolume (DetachVolumeOpts) returns (GenericResponse){}
}

// AttachVolumeOpts is a structure which indicates all required
// properties for attaching a volume.
message AttachVolumeOpts {
	// The access protocol for attaching a volume.
    string accessProtocol = 1;
	// The connectionData for attaching a volume.
	string connectionData = 2;
    // The metadata for attaching a volume, optional.
    map<string, string> metadata = 3;
    // The Context
    string context = 4;
}

// DetachVolumeOpts is a structure which indicates all required
// properties for detaching a volume.
message DetachVolumeOpts {
	// The access protocol for detaching a volume.
    string accessProtocol = 1;
	// The connectionData for detaching a volume.
	string connectionData = 2;
    // The metadata for detaching a volume, optional.
    map<string, string> metadata = 3;
    // The Context
    string context = 4;
}

// Generic response, it return:
// 1. Return result with message when create/update resource successfully.
// 2. Return result without message when delete resource successfully.
// 3. Return Error with error code and message when operate unsuccessfully.
message GenericResponse {
    message Result {
        string message = 1;
    }
    
    message Error {
        string code = 1;
        string description = 2;
    }
    
    oneof reply {
        Result result = 1;
        Error error = 2;
    }
}
